# Git 커밋 메시지 작성 규칙

1. 항상 한국어로 작성하세요.
2. 커밋 메시지는 아래 형식을 따라야 합니다:
   ```
   <type>(<scope>): <subject>

   <body>

   <footer>
   ```
3. [Conventional Commits 규칙](https://www.conventionalcommits.org/en/v1.0.0/#summary)을 따르세요.

## Conventional Commits
- build:
    빌드 도구, 설정, 외부 의존성에 영향을 주는 변경 사항입니다.
    예: `npm`, `yarn`, `pnpm` 업데이트, `webpack`, `vite` 설정 변경 등
- ci:
    CI (지속적 통합) 설정이나 스크립트 변경입니다.
    애플리케이션 로직에는 영향을 주지 않으며, GitHub Actions, Travis CI, Jenkins 등의 도구를 통해 테스트, 빌드, 배포 프로세스를 설정하거나 수정할 때 사용합니다.
- docs:
    문서만 변경된 경우입니다.
    예: README 수정, API 문서, 개발자 가이드, 주석 추가/수정 등
- feat:
    사용자나 시스템을 위한 새로운 기능을 추가한 경우입니다.
    기존에 없던 기능이 새롭게 도입되는 경우 사용합니다.
- fix:
    버그를 수정한 경우입니다.
    잘못된 동작이나 의도치 않은 결과를 해결할 때 사용하며, 보통 이미 알려진 이슈나 문제에 대응합니다.
- perf:
    성능을 개선하는 코드 변경입니다.
    예: 알고리즘 최적화, 메모리 사용 감소, 속도 향상 등 (기능에는 영향 없음)
- refactor:
    기능 추가나 버그 수정 없이 코드를 리팩토링한 경우입니다.
    예: 변수명 변경, 함수 분리, 중복 제거, 디렉토리 구조 정리 등
- style:
    코드 스타일만 변경한 경우입니다.
    예: 들여쓰기, 줄 바꿈, 공백/세미콜론 추가 및 제거 등 (동작에는 영향 없음)
    주의: CSS, HTML 등 UI 코드 변경은 해당되지 않습니다.
- test:
    테스트 코드를 추가하거나 수정한 경우입니다.
    단위 테스트, 통합 테스트, mock, 테스트 유틸리티 등을 포함하며 실제 비즈니스 로직에는 영향을 주지 않습니다.
- chore:
    src나 테스트 파일을 수정하지 않는 일반적인 유지보수 작업입니다.
    예: 의존성 업데이트, `.gitignore` 수정, 폴더 이름 변경, 빌드/CI와 관련 없는 설정 변경 등

